---
title: Homework 7 - Creating a resume database
author: Jack Gurdin
date: 11/19/2023
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document describes the staff database defined by hw7-ddl.sql and presents example queries of said database to demonstrate the functionality of its entity-relationships.

GITHUB URL: https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-JackTheJacob

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

We have a database defining the status of the staff at your boss's company. In this document is described the entity-relationship model and table-schema behind this database and present various queries of said database to demonstrate its functionality.

## Crows-foot diagram

The three kinds of entities in the database are:  
* people  
* skills  
* roles  

Every person performs at least one role and knows any number of skills. Each role or skill can, conversely, be performed or known by any number of people.

```{mermaid}
%%| echo: false
erDiagram

    PERSON }o--o{ SKILL : "knows"
    PERSON }o--|{ ROLE : "performs"

    PERSON {
        int    id
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date   date_joined
    }

    SKILL {
        int    id
        string name
        string description
        string tag
        string url
        int    time_commitment
    }

    ROLE {
        int    id
        string name
        int    sort_priority
    }

```

## Examples of data in the database

### People table

The *people* table contains elements that describe the person's name (first + last), email contact, various other contacts such as linkedin_url and discord_handle, a brief bio i.e. description of the employee, a link to a headshot, and the date said person joined the company.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```

### Skills table

The *skills* table contains elements that describe what each skill is called, what it involves, a URL pointing to a resource from which to learn more about it, and an estimate of the number of hours necessary to become competent in it.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```

### Roles table

The *roles* table contains elements that describe the name of the role, as well as its 'priority', which is included just to allow us to sort all roles ordinally.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

Here's a sample query:

```{python}
sql = f"""
SELECT name, tag, description
FROM skills
ORDER BY name;
"""
```


...and the resulting table from said query.

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT last_name, first_name, email
FROM people
ORDER BY last_name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```

### List skill names of Person 1

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills.name
FROM skills INNER JOIN peopleskills ON skills.id=peopleskills.skills_id
WHERE people_id=1;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```

### List people names with Skill 6

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT first_name, last_name
FROM people INNER JOIN (
    SELECT peopleskills.people_id
    FROM peopleskills INNER JOIN skills ON peopleskills.skills_id=skills.id
    WHERE skills.tag="Skill 6"
) AS T ON people.id=T.people_id;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```


### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.*
FROM people INNER JOIN (
    SELECT peopleroles.people_id
    FROM peopleroles INNER JOIN roles ON peopleroles.role_id=roles.id
    WHERE roles.name="Developer"
) AS T ON people.id=T.people_id
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.first_name, people.last_name, people.email
FROM people LEFT JOIN peopleskills ON people.id=peopleskills.people_id
WHERE peopleskills.skills_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```

### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills.name, skills.tag
FROM skills LEFT JOIN peopleskills ON skills.id=peopleskills.skills_id
WHERE peopleskills.people_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT T.first_name, T.last_name, skills.name AS skill_name
FROM skills INNER JOIN peopleskills INNER JOIN (
    SELECT people.id, people.first_name, people.last_name
    FROM people INNER JOIN peopleroles INNER JOIN roles
    ON people.id=peopleroles.people_id AND peopleroles.role_id=roles.id
    WHERE roles.name="Boss") AS T
ON skills.id=peopleskills.skills_id AND peopleskills.people_id=T.id;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```

### List ids and names of unused roles
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT roles.id, roles.name
FROM roles LEFT JOIN peopleroles ON roles.id=peopleroles.role_id
WHERE peopleroles.people_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df.to_html(index=False)
```

(Should be empty, as all roles are occupied)

## Reflection

This assignment was, I think, teaches a lot more that's useful to the main project than any prior assignment--that is, I feel much more prepared for setting up the final database than I did by any of the previous ones. I do wish, a little bit, that there'd have been more to do with setting up the dependencies here, because I honestly still don't understand what a lot of the softwares configured for this assignment are really for, even though I've learned how to use them in isolation here somewhat.
Overall, I think this assignment was most helpful with the sample queries, which finally let us put into practice all that relational algebra and table knowledge we've been gradually building up over the semester; I learned a lot just by experimenting with the MySQL queries that I really couldn't have just with descriptions of how to use them.